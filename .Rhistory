get_playlist_audio_features("Joost Klein", joost_url) |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
names(halloween)[which(names(halloween) == "track.name")[0]] <- "stairwaylive"
names(halloween)[which(names(halloween) == "track.name")[1]] <- "stairwaystudio"
names(halloween)[which(names(halloween) == "track.name")[2]] <- "rocknrolllive"
names(halloween)[which(names(halloween) == "track.name")[3]] <- "rocknrollstudio"
names(halloween)[which(names(halloween) == "track.name")[4]] <- "dazedlive"
names(halloween)[which(names(halloween) == "track.name")[5]] <- "dazedstudio"
names(halloween)[which(names(halloween) == "track.name")[6]] <- "kashmirllive"
names(halloween)[which(names(halloween) == "track.name")[7]] <- "kashmirstudio"
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration +
C + `C#|Db` + D + `D#|Eb` +
E + `F` + `F#|Gb` + G +
`G#|Ab` + A + `A#|Bb` + B +
c01 + c02 + c03 + c04 + c05 + c06 +
c07 + c08 + c09 + c10 + c11 + c12,
data = halloween
) |>
step_center(all_predictors()) |>
# step_range(all_predictors()) |>
prep(halloween |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames(track.name)
### The similarities between dutch rap and reggeaton
{r}
get_conf_mat <- function(fit) {
outcome <- .get_tune_outcome_names(fit)
fit |>
collect_predictions() |>
conf_mat(truth = outcome, estimate = .pred_class)
}
get_pr <- function(fit) {
fit |>
conf_mat_resampled() |>
group_by(Prediction) |> mutate(precision = Freq / sum(Freq)) |>
group_by(Truth) |> mutate(recall = Freq / sum(Freq)) |>
ungroup() |> filter(Prediction == Truth) |>
select(class = Prediction, precision, recall)
}
halloween1 <-
get_playlist_audio_features("live", "4afgGgLtvmGtVJI31iDcTe") |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
halloween2 <-
get_playlist_audio_features("bnfcollection", "5FtQiHqq3lkfsLXNB4WPeQ") |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
both <- bind_rows(halloween1, halloween2)
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration,
data = both
) |>
step_center(all_predictors()) |>
step_scale(all_predictors()) |>
# step_range(all_predictors()) |>
prep(both |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames("track.name")
halloween_dist <- dist(halloween_juice, method = "euclidean")
halloween_dist |>
hclust(method = "single") |> # Try single, average, and complete.
dendro_data() |>
ggdendrogram()
get_conf_mat <- function(fit) {
outcome <- .get_tune_outcome_names(fit)
fit |>
collect_predictions() |>
conf_mat(truth = outcome, estimate = .pred_class)
}
get_pr <- function(fit) {
fit |>
conf_mat_resampled() |>
group_by(Prediction) |> mutate(precision = Freq / sum(Freq)) |>
group_by(Truth) |> mutate(recall = Freq / sum(Freq)) |>
ungroup() |> filter(Prediction == Truth) |>
select(class = Prediction, precision, recall)
}
halloween1 <-
get_playlist_audio_features("live", "4afgGgLtvmGtVJI31iDcTe") |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
halloween2 <-
get_playlist_audio_features("bnfcollection", "3saRK9UE5HSJRLBDxj2HEl") |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
both <- bind_rows(halloween1, halloween2)
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration,
data = both
) |>
step_center(all_predictors()) |>
step_scale(all_predictors()) |>
# step_range(all_predictors()) |>
prep(both |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames("track.name")
get_conf_mat <- function(fit) {
outcome <- .get_tune_outcome_names(fit)
fit |>
collect_predictions() |>
conf_mat(truth = outcome, estimate = .pred_class)
}
get_pr <- function(fit) {
fit |>
conf_mat_resampled() |>
group_by(Prediction) |> mutate(precision = Freq / sum(Freq)) |>
group_by(Truth) |> mutate(recall = Freq / sum(Freq)) |>
ungroup() |> filter(Prediction == Truth) |>
select(class = Prediction, precision, recall)
}
halloween1 <-
get_playlist_audio_features("live", "4afgGgLtvmGtVJI31iDcTe") |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration,
data = both
) |>
step_center(all_predictors()) |>
step_scale(all_predictors()) |>
# step_range(all_predictors()) |>
prep(both |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames("track.name")
joost_url = '4afgGgLtvmGtVJI31iDcTe'
halloween <-
get_playlist_audio_features("Joost Klein", joost_url) |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration +
C + `C#|Db` + D + `D#|Eb` +
E + `F` + `F#|Gb` + G +
`G#|Ab` + A + `A#|Bb` + B +
c01 + c02 + c03 + c04 + c05 + c06 +
c07 + c08 + c09 + c10 + c11 + c12,
data = halloween
) |>
step_center(all_predictors()) |>
step_scale(all_predictors()) |>
# step_range(all_predictors()) |>
prep(halloween |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames("track.name")
halloween_dist <- dist(halloween_juice, method = "euclidean")
halloween_dist |>
hclust(method = "single") |> # Try single, average, and complete.
dendro_data() |>
ggdendrogram()
heatmaply(
halloween_juice,
hclustfun = hclust,
hclust_method = "average",  # Change for single, average, or complete linkage.
dist_method = "euclidean"
)
joost_url = '3saRK9UE5HSJRLBDxj2HEl'
halloween <-
get_playlist_audio_features("Joost Klein", joost_url) |>
add_audio_analysis() |>
mutate(
segments = map2(segments, key, compmus_c_transpose),
pitches =
map(segments,
compmus_summarise, pitches,
method = "mean", norm = "manhattan"
),
timbre =
map(
segments,
compmus_summarise, timbre,
method = "mean"
)
) |>
mutate(pitches = map(pitches, compmus_normalise, "clr")) |>
mutate_at(vars(pitches, timbre), map, bind_rows) |>
unnest(cols = c(pitches, timbre))
halloween_juice <-
recipe(
track.name ~
danceability +
energy +
loudness +
speechiness +
acousticness +
instrumentalness +
liveness +
valence +
tempo +
duration +
C + `C#|Db` + D + `D#|Eb` +
E + `F` + `F#|Gb` + G +
`G#|Ab` + A + `A#|Bb` + B +
c01 + c02 + c03 + c04 + c05 + c06 +
c07 + c08 + c09 + c10 + c11 + c12,
data = halloween
) |>
step_center(all_predictors()) |>
step_scale(all_predictors()) |>
# step_range(all_predictors()) |>
prep(halloween |> mutate(track.name = str_trunc(track.name, 20))) |>
juice() |>
column_to_rownames("track.name")
halloween_dist <- dist(halloween_juice, method = "euclidean")
halloween_dist |>
hclust(method = "single") |> # Try single, average, and complete.
dendro_data() |>
ggdendrogram()
heatmaply(
halloween_juice,
hclustfun = hclust,
hclust_method = "average",  # Change for single, average, or complete linkage.
dist_method = "euclidean"
)
live <-
get_playlist_audio_features(
"",
"4afgGgLtvmGtVJI31iDcTe"
) |>
slice(1:30) |>
add_audio_analysis()
studio <-
get_playlist_audio_features(
"",
"3saRK9UE5HSJRLBDxj2HEl"
) |>
slice(1:30) |>
add_audio_analysis()
livevsstudio <-
live |>
mutate(genre = "live") |>
bind_rows(studio |> mutate(genre = "studio"))
livevsstudio |>
mutate(
sections =
map(
sections,                                    # sections or segments
summarise_at,
vars(tempo, loudness, duration),             # features of interest
list(section_mean = mean, section_sd = sd)   # aggregation functions
)
) |>
unnest(sections) |>
ggplot(
aes(
x = tempo,
y = tempo_section_sd,
colour = genre,
alpha = loudness
)
) +
geom_point(aes(size = duration / 60)) +
geom_rug() +
theme_minimal() +
ylim(0, 5) +
labs(
x = "Mean Tempo (bpm)",
y = "SD Tempo",
colour = "Genre",
size = "Duration (min)",
alpha = "Volume (dBFS)"
)
livevsstudio |>
mutate(
timbre =
map(
segments,
compmus_summarise,
timbre,
method = "mean"
)
) |>
select(genre, timbre) |>
compmus_gather_timbre() |>
ggplot(aes(x = basis, y = value, fill = genre)) +
geom_violin() +
scale_fill_viridis_d() +
labs(x = "Spotify Timbre Coefficients", y = "", fill = "Genre")
library(flexdashboard)
library(tidyverse)
library(spotifyr)
library(compmus)
library(plotly)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(ggdendro)
library(heatmaply)
live <-
get_playlist_audio_features(
"",
"4afgGgLtvmGtVJI31iDcTe"
) |>
slice(1:30) |>
add_audio_analysis()
studio <-
get_playlist_audio_features(
"",
"3saRK9UE5HSJRLBDxj2HEl"
) |>
slice(1:30) |>
add_audio_analysis()
livevsstudio <-
live |>
mutate(genre = "live") |>
bind_rows(studio |> mutate(genre = "studio"))
livevsstudio |>
mutate(
timbre =
map(
segments,
compmus_summarise,
timbre,
method = "mean"
)
) |>
select(genre, timbre) |>
compmus_gather_timbre() |>
ggplot(aes(x = basis, y = value, fill = genre)) +
geom_violin() +
scale_fill_viridis_d() +
labs(x = "Spotify Timbre Coefficients", y = "", fill = "Genre")
View(livevsstudio)
saveRDS(object = graveola8, file = "data/tempogram8.RDS")
graveola1 <- get_tidy_audio_analysis("3sxIm3lTgdvXJdNHNn64BS")
graveola1 |>
tempogram(window_size = 8, hop_size = 1, cyclic = FALSE) |>
ggplot(aes(x = time, y = bpm, fill = power)) +
geom_raster() +
scale_fill_viridis_c(guide = "none") +
labs(x = "Time (s)", y = "Tempo (BPM)") +
theme_classic()
saveRDS(object = graveola1, file = "data/tempogram1.RDS")
graveola1 <- get_tidy_audio_analysis("3sxIm3lTgdvXJdNHNn64BS")
graveola1 |>
tempogram(window_size = 8, hop_size = 1, cyclic = FALSE) |>
ggplot(aes(x = time, y = bpm, fill = power)) +
geom_raster() +
scale_fill_viridis_c(guide = "none") +
labs(x = "Time (s)", y = "Tempo (BPM)") +
theme_classic()
saveRDS(object = graveola1, file = "data/tempogram1.RDS")
